=begin
#reattract.io API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Contact: support@reattract.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module OpenapiClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List organizations
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @return [Array<Organization>]
    def api_v1_organizations_get(opts = {})
      data, _status_code, _headers = api_v1_organizations_get_with_http_info(opts)
      data
    end

    # List organizations
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @return [Array<(Array<Organization>, Integer, Hash)>] Array<Organization> data, response status code and response headers
    def api_v1_organizations_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_v1_organizations_get ...'
      end
      # resource path
      local_var_path = '/api/v1/organizations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Organization>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"DefaultApi.api_v1_organizations_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v1_organizations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an organization
    # @param id [String] id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @return [nil]
    def api_v1_organizations_id_delete(id, opts = {})
      api_v1_organizations_id_delete_with_http_info(id, opts)
      nil
    end

    # Delete an organization
    # @param id [String] id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_v1_organizations_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_v1_organizations_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_v1_organizations_id_delete"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"DefaultApi.api_v1_organizations_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v1_organizations_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an organization
    # @param id [String] id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @return [Organization]
    def api_v1_organizations_id_get(id, opts = {})
      data, _status_code, _headers = api_v1_organizations_id_get_with_http_info(id, opts)
      data
    end

    # Retrieve an organization
    # @param id [String] id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @return [Array<(Organization, Integer, Hash)>] Organization data, response status code and response headers
    def api_v1_organizations_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_v1_organizations_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_v1_organizations_id_get"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Organization'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"DefaultApi.api_v1_organizations_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v1_organizations_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an organization
    # @param id [String] id
    # @param organization [Organization] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @return [Organization]
    def api_v1_organizations_id_patch(id, organization, opts = {})
      data, _status_code, _headers = api_v1_organizations_id_patch_with_http_info(id, organization, opts)
      data
    end

    # Update an organization
    # @param id [String] id
    # @param organization [Organization] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @return [Array<(Organization, Integer, Hash)>] Organization data, response status code and response headers
    def api_v1_organizations_id_patch_with_http_info(id, organization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_v1_organizations_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_v1_organizations_id_patch"
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling DefaultApi.api_v1_organizations_id_patch"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(organization)

      # return_type
      return_type = opts[:debug_return_type] || 'Organization'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"DefaultApi.api_v1_organizations_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v1_organizations_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an organization
    # @param organization [Organization] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @return [Organization]
    def api_v1_organizations_post(organization, opts = {})
      data, _status_code, _headers = api_v1_organizations_post_with_http_info(organization, opts)
      data
    end

    # Create an organization
    # @param organization [Organization] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @return [Array<(Organization, Integer, Hash)>] Organization data, response status code and response headers
    def api_v1_organizations_post_with_http_info(organization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_v1_organizations_post ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling DefaultApi.api_v1_organizations_post"
      end
      # resource path
      local_var_path = '/api/v1/organizations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(organization)

      # return_type
      return_type = opts[:debug_return_type] || 'Organization'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"DefaultApi.api_v1_organizations_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v1_organizations_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a user
    # @param id [String] id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @return [User]
    def api_v1_users_id_get(id, opts = {})
      data, _status_code, _headers = api_v1_users_id_get_with_http_info(id, opts)
      data
    end

    # Retrieve a user
    # @param id [String] id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def api_v1_users_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_v1_users_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_v1_users_id_get"
      end
      # resource path
      local_var_path = '/api/v1/users/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"DefaultApi.api_v1_users_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v1_users_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a user
    # @param id [String] id
    # @param user [User] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @return [User]
    def api_v1_users_id_patch(id, user, opts = {})
      data, _status_code, _headers = api_v1_users_id_patch_with_http_info(id, user, opts)
      data
    end

    # Update a user
    # @param id [String] id
    # @param user [User] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def api_v1_users_id_patch_with_http_info(id, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_v1_users_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_v1_users_id_patch"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling DefaultApi.api_v1_users_id_patch"
      end
      # resource path
      local_var_path = '/api/v1/users/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user)

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"DefaultApi.api_v1_users_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v1_users_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve user profile information based on JWT
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @return [User]
    def api_v1_users_profile_get(opts = {})
      data, _status_code, _headers = api_v1_users_profile_get_with_http_info(opts)
      data
    end

    # Retrieve user profile information based on JWT
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def api_v1_users_profile_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_v1_users_profile_get ...'
      end
      # resource path
      local_var_path = '/api/v1/users/profile'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"DefaultApi.api_v1_users_profile_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v1_users_profile_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # User sign up
    # @param user [User] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [nil]
    def api_v1_users_registrations_post(user, opts = {})
      api_v1_users_registrations_post_with_http_info(user, opts)
      nil
    end

    # User sign up
    # @param user [User] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_v1_users_registrations_post_with_http_info(user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_v1_users_registrations_post ...'
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling DefaultApi.api_v1_users_registrations_post"
      end
      # resource path
      local_var_path = '/api/v1/users/registrations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.api_v1_users_registrations_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v1_users_registrations_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sign out as a user
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @return [nil]
    def api_v1_users_sessions_delete(opts = {})
      api_v1_users_sessions_delete_with_http_info(opts)
      nil
    end

    # Sign out as a user
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @option opts [String] :authorization 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_v1_users_sessions_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_v1_users_sessions_delete ...'
      end
      # resource path
      local_var_path = '/api/v1/users/sessions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"DefaultApi.api_v1_users_sessions_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v1_users_sessions_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sign in as a user
    # @param user_authentication [UserAuthentication] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [nil]
    def api_v1_users_sessions_post(user_authentication, opts = {})
      api_v1_users_sessions_post_with_http_info(user_authentication, opts)
      nil
    end

    # Sign in as a user
    # @param user_authentication [UserAuthentication] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_v1_users_sessions_post_with_http_info(user_authentication, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_v1_users_sessions_post ...'
      end
      # verify the required parameter 'user_authentication' is set
      if @api_client.config.client_side_validation && user_authentication.nil?
        fail ArgumentError, "Missing the required parameter 'user_authentication' when calling DefaultApi.api_v1_users_sessions_post"
      end
      # resource path
      local_var_path = '/api/v1/users/sessions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_authentication)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.api_v1_users_sessions_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v1_users_sessions_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
